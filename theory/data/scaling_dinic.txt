#include<bits/stdc++.h>

using namespace std;

const int MAXN = 505;

int cap[MAXN][MAXN], flow[MAXN][MAXN];
vector<int> level(MAXN,-1), first(MAXN, 0);
vector<int> g[MAXN];

bool bfs(int start, int finish,int limit) {
    queue<int> q;
    q.push(start);
    level[start] = 0;
    while(!q.empty()) {
        int v = q.front(); q.pop();
        for(int i=0;i<g[v].size();i++) {
            int to = g[v][i];
            if (level[to]==-1 && cap[v][to] - flow[v][to] >= limit) {
                level[to] = level[v] + 1;
                q.push(to);
            }
        }
    }
    return level[finish]!=-1;
}

bool dfs(int v,int finish, int limit) {
    if (v==finish) return 1;
    for(int i=first[v];i<g[v].size();i++, first[v]++) {
        int to = g[v][i];
        if (level[to] == level[v] + 1 && cap[v][to] - flow[v][to]>=limit) {
            int res = dfs(to,finish,limit);
            if (res>0) {
                flow[v][to]+=limit;
                flow[to][v]-=limit;
                return 1;
            }
        }

    }
    return 0;
}


int main() {

    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n, m;
    cin>>n>>m;
    for(int i=0;i<m;i++) {
        int u,v,f;
        cin>>u>>v>>f;
        g[u].push_back(v);
        g[v].push_back(u);
        cap[u][v] = f;
    }

    long long ans = 0;
    for(int k=30;k>=0;) {
        level.assign(MAXN, -1);
        first.assign(MAXN, 0);
        
        bool cur = bfs(1,n,(1<<k));
        if (!cur) {
            k--;
            continue;
        }

        while(dfs(1,n,(1<<k))) {
            ans += 1ll*(1<<k);
        }
    }

    cout<<ans<<'\n';

    return 0;
}
