#include<bits/stdc++.h>

using namespace std;

int srand() {
    if (RAND_MAX==(1<<15)-1) {
        return (rand()<<15) + rand();
    } else return rand();
}

struct Node{
    int sz,pri;
    int val;
    Node * l,* r;
    Node(int val) : l(nullptr), r(nullptr), sz(1), val(val), pri(srand()) {}
};

int get_sz(Node* v) {
    if (!v) return 0;
    return v->sz;
}

void upd(Node* v) {
    if (v) v->sz = get_sz(v->l)+get_sz(v->r)+1;
}

void split(Node* root, Node*& l, Node*& r,int k) {
	// k - ñêîëüêî âåðøèí îñòàíåòñÿ â ëåâîì ïîääåðåâå
    if (!root) {
        l = r = nullptr;
        return;
    }
    if (get_sz(root->l) >= k) {
        split(root->l,l,root->l,k);
        r=root;
        upd(r);
    } else {
        split(root->r,root->r,r,k-get_sz(root->l)-1);
        l=root;
        upd(l);
    }
}

void merge(Node*& root, Node* l,Node* r) {
    if (!l || !r) {
        root = l ? l : r;
        return;
    }
    if (l->pri > r->pri) {
        merge(l->r, l->r,r);
        root = l;
    } else {
        merge(r->l, l, r->l);
        root = r;
    }
    upd(root);
}

Node* tmp1,* tmp2,* tmp3;
void insert(Node*& root,int val,int pos) {
    Node* ins = new Node(val);
    split(root,tmp1,tmp2,pos);
    merge(tmp1,tmp1,ins);
    merge(root,tmp1,tmp2);
}
void erase(Node*& root,int pos) {
    split(root,tmp1,tmp2,pos);
    split(tmp2,tmp2,tmp3,1);
    merge(root,tmp1,tmp3);
}



int main() {

    Node* dd = nullptr;

}
