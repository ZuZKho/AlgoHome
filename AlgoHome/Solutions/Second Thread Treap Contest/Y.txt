#include<bits/stdc++.h>

using namespace std;

struct Node{
    int val, sz, pri,ans;
    int pref1,pref0,suf1,suf0;
    string oper;
    Node *l, *r;
    Node(int val1) : val(val1),sz(1),pri(rand()),ans(1), oper("none"),
        pref1(val1==1?1:0),pref0(val1==0?1:0),
        suf1(val1==1?1:0),suf0(val1==0?1:0), l(nullptr),r(nullptr) {}
};

Node* dd = nullptr;

int get_sz(Node* v) {
    if (!v) return 0;
    return v->sz;
}
int get_ans(Node* v) {
    if (!v) return 0;
    return v->ans;
}

int get_pref1(Node* v) {
    if (!v) return 0;
    return v->pref1;
}

int get_pref0(Node* v) {
    if (!v) return 0;
    return v->pref0;
}

int get_suf1(Node* v) {
    if (!v) return 0;
    return v->suf1;
}

int get_suf0(Node* v) {
    if (!v) return 0;
    return v->suf0;
}

void upd(Node* v) {
    if (!v) return;
    v->ans = max(get_ans(v->l),get_ans(v->r));
    v->sz = get_sz(v->l) + get_sz(v->r) + 1;
    if (v->val==0) {
        v->ans = max(v->ans,get_suf0(v->l) + 1 + get_pref0(v->r));
        if (get_suf0(v->l)==get_sz(v->l)) v->pref0 = get_sz(v->l) + 1 + get_pref0(v->r);
            else v->pref0 = get_pref0(v->l);
        v->pref1 = get_pref1(v->l);
        if (get_pref0(v->r)==get_sz(v->r)) v->suf0 = get_sz(v->r) + 1 + get_suf0(v->l);
            else v->suf0 = get_suf0(v->r);
        v->suf1 = get_suf1(v->r);
    } else {
        v->ans = max(v->ans,get_suf1(v->l) + 1 + get_pref1(v->r));
        if (get_suf1(v->l)==get_sz(v->l)) v->pref1 = get_sz(v->l) + 1 + get_pref1(v->r);
            else v->pref1 = get_pref1(v->l);
        v->pref0 = get_pref0(v->l);
        if (get_pref1(v->r)==get_sz(v->r)) v->suf1 = get_sz(v->r) + 1 + get_suf1(v->l);
            else v->suf1 = get_suf1(v->r);
        v->suf0 = get_suf0(v->r);
    }
}

void push(Node* v) {
    if (!v) return;
    if (v->oper=="none") return;
    if (v->l) {
        if (v->l->oper == "none") v->l->oper = "inv"; else v->l->oper = "none";
        swap(v->l->pref0,v->l->pref1);
        swap(v->l->suf0,v->l->suf1);
        v->l->val = 1 - v->l->val;
    }
    if (v->r) {
        if (v->r->oper == "none") v->r->oper = "inv"; else v->r->oper = "none";
        swap(v->r->pref0,v->r->pref1);
        swap(v->r->suf0,v->r->suf1);
        v->r->val = 1 - v->r->val;
    }
    v->oper = "none"; return;
}

void split(Node* root,Node*& l,Node*& r,int k) {
    if (!root) {
        l = r = nullptr;
        return;
    }
    push(root);
    if (get_sz(root->l)>=k) {
        split(root->l,l,root->l,k);
        r = root;
        upd(r);
    } else {
        split(root->r,root->r,r,k-get_sz(root->l)-1);
        l = root;
        upd(l);
    }
}

void merge(Node*& root, Node* l, Node* r) {
    if (!l || !r) {
        root = l?l:r;
        return;
    }
    push(l); push(r);
    if (l->pri> r->pri) {
        merge(l->r,l->r,r);
        root = l;
    } else {
        merge(r->l,l,r->l);
        root = r;
    }
    upd(root);
}

Node *tmp1, *tmp2, *tmp3;

void Inverse(int l,int r) {
    split(dd,tmp1,tmp2,l);
    split(tmp2,tmp2,tmp3,r-l+1);
    tmp2->oper = "inv";
    swap(tmp2->pref0,tmp2->pref1);
    swap(tmp2->suf0,tmp2->suf1);
    tmp2->val = 1 - tmp2->val;
    merge(dd,tmp1,tmp2);
    merge(dd,dd,tmp3);
}

int main() {

    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n,q; cin>>n>>q;
    string s; cin>>s;

    for(int i=0;i<n;i++) {
        Node* nw = new Node(s[i]-'0');
        merge(dd,dd,nw);
    }

    while(q--) {
        int type,l,r;
        cin>>type>>l>>r;
        if (type==1) {
            Inverse(l-1,r-1);
        }
        cout<<get_ans(dd)<<'\n';
    }

    return 0;
}