#include<bits/stdc++.h>

using namespace std;

const int MOD = 1e9 + 7, p = 239;
vector<int> pp(1e6,1);

int srand() {
    return (rand()<<15) + rand();
}

struct Node{
    char val;
    int pri;
    int sz;
    int h,bh;
    Node *l, *r;
    Node(char val1) : val(val1),pri(srand()),sz(1),h(val1),bh(val1),l(nullptr),r(nullptr) {}
};

Node *dd = nullptr;
Node *tmp1,*tmp2,*tmp3,*tmp4, *tmp5;

int get_sz(Node *v) {
    if (!v) return 0;
    return v->sz;
}

int get_h(Node *v) {
    if (!v) return 0;
    return v->h;
}

int get_bh(Node *v) {
    if (!v) return 0;
    return v->bh;
}

void upd(Node *v) {
    if (!v) return;
    v->sz = get_sz(v->l) + get_sz(v->r) + 1;
    v->h = (get_h(v->l) + pp[get_sz(v->l)]*1ll*v->val + pp[get_sz(v->l) + 1]*1ll*get_h(v->r)) % MOD;
    v->bh = (get_bh(v->r) + pp[get_sz(v->r)]*1ll*v->val + pp[get_sz(v->r) + 1]*1ll*get_bh(v->l)) % MOD;
}

void split(Node *root,Node*& l,Node*&r, int k) {
    if (!root) {
        l = r = nullptr;
        return;
    }
    if (get_sz(root->l)>=k) {
        split(root->l,l,root->l,k);
        r = root;
        upd(r);
    } else {
        split(root->r,root->r,r,k - get_sz(root->l) - 1);
        l = root;
        upd(l);
    }
}

void merge(Node*& root,Node *l,Node* r) {
    if (!l || !r) {
        root = l?l:r;
        return;
    }
    if (l->pri > r->pri) {
        merge(l->r,l->r,r);
        root = l;
    } else {
        merge(r->l,l,r->l);
        root = r;
    }
    upd(root);
}

void print(Node *root) {
    if (root->l) print(root->l);
    cout<<root->val<<" ";
    if (root->r) print(root->r);
}

int main() {

    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    pp[0] = 1;
    for(int i=1;i<1e6;i++) {
        pp[i] = (pp[i-1]*1ll*p) % MOD;
    }

    int n,q;
    cin>>n>>q;
    string s; cin>>s;
    for(int i=0;i<n;i++) {
        Node *nw = new Node(s[i]);
        merge(dd,dd,nw);
    }

    while(q--) {
        int type;
        cin>>type;
        if (type==1) {
            int l,r; cin>>l>>r; l--,r--;
            split(dd,tmp1,tmp2,l);
            split(tmp2,tmp2,tmp3,r-l+1);
            merge(dd,tmp1,tmp3);
        } else
        if (type==2) {
            char c; int p;
            cin>>c>>p; p--;
            split(dd,tmp1,tmp2,p);
            Node *nw = new Node(c);
            merge(tmp1,tmp1,nw);
            merge(dd,tmp1,tmp2);
        } else
        if (type==3) {
            int l,r; cin>>l>>r; l--,r--;
            split(dd,tmp1,tmp2,l);
            split(tmp2,tmp2,tmp3,r-l+1);
            if (tmp2->h==tmp2->bh) cout<<"yes"<<'\n'; else cout<<"no"<<'\n';
            merge(dd,tmp1,tmp2);
            merge(dd,dd,tmp3);
        }
    }

    return 0;
}