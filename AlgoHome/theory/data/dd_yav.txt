#include<bits/stdc++.h>

using namespaces std;

int srand() {
    if (RAND_MAX==(1<<15)-1)
        return (rand()<<15) + rand();
    return rand();
}

struct Node{
    int key, pri;
    Node * l, * r;
    Node(int key) : key(key), pri(srand()), l(nullptr), r(nullptr) {}
};

Node * tmp1,* tmp2, * tmp3;
void split(Node * root, Node*& l,Node*& r,int key) {
    if (!root) {
        l = r = nullptr;
        return;
    }
    if (root->key < key) {
        split(root->r,root->r,r,key);
        l=root;
    } else {
        split(root->l,l,root->l,key);
        r=root;
    }
}

void merge(Node*& root,Node* l,Node* r) {
    if (!l||!r) {
        root = l ? l:r;
        return;
    }
    if (l->pri > r->pri) {
        merge(l->r,l->r,r);
        root = l;
    } else {
        merge(r->l,l,r->l);
        root = r;
    }
}

void insert(Node*& root,int key) {
    Node* ins = new Node(key);
    split(root,tmp1,tmp2,key);
    merge(tmp1,tmp1,ins);
    merge(root,tmp1,tmp2);
}

void erase(Node*& root,int key) {
    split(root,tmp1,tmp2,key);
    split(tmp2,tmp2,tmp3,key+1);
    merge(root,tmp1,tmp3);
}

bool check(Node* root,int key) {
    if (!root) return 0;
    if (root->key==key) return 1;
    if (root->key>key) return check(root->l,key); else return check(root->r,key);
}

int main() {

    Node* dd = nullptr;

    string type;
    while(cin>>type) {

        int x;
        cin>>x;

        if (type=="insert") {
            insert(dd,x);
        }
        if (type=="delete") {
            erase(dd,x);
        }
        if (type=="exists") {
            cout<<(check(dd,x)?"true":"false")<<endl;
        }

    }

    return 0;
}
