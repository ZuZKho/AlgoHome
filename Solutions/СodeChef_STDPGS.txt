#include<bits/stdc++.h>

using namespace std;

struct query{
    int l,r,idx;
};

int bsz = 400;

bool cmp(query &a,query &b) {
    if (a.l/bsz==b.l/bsz) return a.r < b.r;
    return a.l/bsz < b.l/bsz;
}

multiset<long long> mst;
long long ans = 0;


void add(long long x) {
    if (mst.size()==0) {
        mst.insert(x);
        return;
    }
    auto it = mst.lower_bound(x);
    if (*it==x) {
        mst.insert(x);
    } else {
        long long bef, aft;
        if (it==mst.begin()) bef = -1; else {
            it--;
            bef = *it;
            it++;
        }
        if (it==mst.end()) aft = -1; else {
            aft = *it;
        }
        if (bef!=-1 && aft!=-1) {
            ans-=(aft - bef)*(aft - bef);
            ans+=(aft - x)*(aft - x);
            ans+=(x-bef)*(x-bef);
        } else
        if (bef==-1) {
            ans+=(aft-x)*(aft-x);
        } else
        if (aft==-1) {
            ans+=(bef-x)*(bef-x);
        }
        mst.insert(x);
    }

    return;
}

void del(long long x) {
    if (mst.size()==1) {
        mst.erase(x);
        return;
    }
    auto it = mst.lower_bound(x);
    it++;
    if (it!=mst.end() && *it==x) {
        mst.erase(mst.find(x));
        return;
    }
    it--;


    long long bef, aft;
    if (it==mst.begin()) bef = -1; else {
        it--;
        bef = *it;
        it++;
    }
    it++;
    if (it==mst.end()) aft = -1; else {
        aft = *it;
    }

    if (bef!=-1 && aft!=-1) {
        ans+=(aft - bef)*(aft - bef);
        ans-=(aft - x)*(aft - x);
        ans-=(x-bef)*(x-bef);
    } else
    if (bef==-1) {
        ans-=(aft-x)*(aft-x);
    } else
    if (aft==-1) {
        ans-=(bef-x)*(bef-x);
    }
    mst.erase(mst.find(x));

    return;
}

int main() {

    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin>>n;
    vector<int> a(n);
    for(int i=0;i<n;i++) cin>>a[i];
    vector<query> queries;
    int m;
    cin>>m;
    for(int i=0;i<m;i++) {
        int l,r;
        cin>>l>>r;
        queries.push_back({l-1,r,i});
    }
    sort(queries.begin(),queries.end(),cmp);

    vector<long long> answers(m);
    int L = 0, R = 0;
    for(int i=0;i<m;i++) {
        int l = queries[i].l,r = queries[i].r,idx = queries[i].idx;
        while(R<r) {
            add(a[R]); R++;
        }
        while(L>l) {
            add(a[L-1]); L--;
        }
        while(R>r) {
            del(a[R-1]); R--;
        }
        while(L<l) {
            del(a[L]); L++;
        }
        answers[idx] = ans;
    }

    for(int i=0;i<m;i++) cout<<answers[i]<<'\n';

    return 0;
}
