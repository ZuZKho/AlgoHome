#include<bits/stdc++.h>

using namespace std;

int srand() {
    if (RAND_MAX==(1<<15)-1) {
        return (rand()<<15) + rand();
    } else return rand();
}

struct Node{
    int sz,pri;
    long long val,sum;

    Node * l,* r;
    Node(long long val) : l(nullptr), r(nullptr), sz(1), val(val), pri(srand()), sum(val) {}
};

int get_sz(Node* v) {
    if (!v) return 0;
    return v->sz;
}

long long get_sum(Node* v) {
    if (!v) return 0;
    return v->sum;
}

void upd(Node* v) {
    if (v) {
        v->sz = get_sz(v->l)+get_sz(v->r)+1;
        v->sum = get_sum(v->l) + get_sum(v->r) + v->val;
    }
}

void split(Node* root, Node*& l, Node*& r,int k) {
    if (!root) {
        l = r = nullptr;
        return;
    }
    if (get_sz(root->l) >= k) {
        split(root->l,l,root->l,k);
        r=root;
        upd(r);
    } else {
        split(root->r,root->r,r,k-get_sz(root->l)-1);
        l=root;
        upd(l);
    }
}

void merge(Node*& root, Node* l,Node* r) {
    if (!l || !r) {
        root = l ? l : r;
        return;
    }
    if (l->pri > r->pri) {
        merge(l->r, l->r,r);
        root = l;
    } else {
        merge(r->l, l, r->l);
        root = r;
    }
    upd(root);
}


Node* tmp1,* tmp2,* tmp3,* tmp4,* tmp5,* tmp6;
void add(Node*& root,long long val) {
    Node* last=new Node(val);
    merge(root,root,last);
}


void print(Node* root) {
    if (!root) return;
    print(root->l);
    cout<< root->val <<" ";
    print(root->r);
}

long long sum(Node* root,int l,int r) {
    if (l>r) return 0;
    split(root,tmp1,tmp2,l);
    split(tmp2,tmp2,tmp3,r-l+1);
    long long res =  tmp2->sum;
    merge(root,tmp1,tmp2);
    merge(root,root,tmp3);
    return res;
}

void swapper(Node*& ch,int l1,int r1,Node*& nch,int l2,int r2) {
    split(ch,tmp1,tmp2,l1);
    split(tmp2,tmp2,tmp3,r1-l1+1); //tmp1 tmp2 tmp3

    split(nch,tmp4,tmp5,l2);
    split(tmp5,tmp5,tmp6,r2-l2+1); // tmp4 tmp5 tmp6

    merge(ch,tmp1,tmp5);
    merge(ch,ch,tmp3);
    merge(nch,tmp4,tmp2);
    merge(nch,nch,tmp6);
}

int main() {

    int cnt = 1;
    while(1) {
        Node* ch = nullptr,* nch = nullptr;
        int n,m;
        cin>>n>>m;
        if (n==0 && m==0) return 0;
        for(int i=0;i<n;i++) {
            int x;
            cin>>x;
            if (i%2==0)
                add(ch,x);
            else
                add(nch,x);
        }

        //print(ch);

        cout<<"Swapper "<<cnt<<":"<<endl; cnt++;
        while(m--) {
            int type;
            cin>>type;
            if (type==1) {
                int l,r;
                cin>>l>>r;
                l--;
                r--;
                swapper(ch,l/2+l%2,r/2,nch,l/2,r/2-(r+1)%2);
            } else {
                int l,r;
                cin>>l>>r;
                l--;
                r--;
                cout<<sum(ch,l/2+l%2,r/2)+sum(nch,l/2,r/2-(r+1)%2)<<endl;
            }
        }
    }
    return 0;
}
