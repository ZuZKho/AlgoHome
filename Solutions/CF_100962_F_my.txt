#include<bits/stdc++.h>

using namespace std;

const int MAXN = 1e5 + 5;
vector<int> edges(MAXN);
vector<int> tin(MAXN),tout(MAXN);
vector<pair<int,int> > g[MAXN];
vector<int> tour;
vector<int> edgetour;
vector<int> cnte(MAXN,0);
vector<int> cnt(MAXN,0);
vector<int> blockcnt(300,0);
int timer = 0;
int bsz = 1000;
int stsz = 350;

struct query{
    int l,r,idx;
};

bool cmp(query &a,query &b) {
    if (a.l/bsz==b.l/bsz) return a.r < b.r;
    return a.l/bsz < b.l/bsz;
}

void dfs(int v,int p,int edgenum) {
    tour.push_back(v);
    tin[v] = timer++;
    if (p!=-1) edgetour.push_back(edgenum);
    for(int i=0;i<g[v].size();i++) {
        int to = g[v][i].first, num = g[v][i].second;
        if (to==p) continue;
        dfs(to,v,num);
        tour.push_back(v); timer++;
    }
    if (p!=-1) edgetour.push_back(edgenum);
    tout[v] = timer - 2;
}

void del(int e) {
    if (e>=MAXN) return;
    if (cnt[e]==1) {
        blockcnt[e/stsz]--;
        cnt[e]--;
    } else {
        cnt[e]--;
    }
}

void add(int e) {
    if(e>=MAXN) return;
    if (cnt[e]==0) {
        blockcnt[e/stsz]++;
        cnt[e]++;
    } else {
        cnt[e]++;
    }
}

int Ans() {
    int idx;
    for(int i=0;i<300;i++) {
        if (blockcnt[i]!=stsz) {
            idx = i;
            break;
        }
    }
    for(int i=idx*stsz;i<idx*stsz + stsz;i++) {
        if (cnt[i]==0) return i;
    }
}

void Add(int i) {
    int e = edgetour[i]; if (e==-1) return;
    if (cnte[e]==1) {
        del(edges[e]);
    } else {
        add(edges[e]);
    }
    cnte[e]++;
}

void Del(int i) {
    int e = edgetour[i]; if (e==-1) return;
    if (cnte[e]==1) {
        del(edges[e]);
    } else {
        add(edges[e]);
    }
    cnte[e]--;
}

int main() {

    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n,q;
    cin>>n>>q;
    for(int i=0;i<n-1;i++) {
        int u,v,c;
        cin>>u>>v>>c;
        edges[i] = c;
        g[u].push_back({v,i});
        g[v].push_back({u,i});
    }

    dfs(1,-1,-1);

    vector<query> queries;
    for(int i=0;i<q;i++) {
        int u,v;
        cin>>u>>v;
        int l = tin[u], r = tin[v];
        if (l > r) swap(l,r);
        queries.push_back({l,r,i});

    }
    vector<int> answers(q);
    sort(queries.begin(),queries.end(),cmp);
    int L = 0,R = 0;

    for(int i=0;i<q;i++) {
        int l = queries[i].l, r = queries[i].r,idx = queries[i].idx;
        while(R<r) {
            Add(R); R++;
        }
        while(L>l) {
            Add(L-1); L--;
        }
        while(L<l) {
            Del(L); L++;
        }
        while(R>r) {
            Del(R-1); R--;
        }
        answers[idx] = Ans();
    }

    for(int i=0;i<q;i++) {
        cout<<answers[i]<<'\n';
    }

    return 0;
}
