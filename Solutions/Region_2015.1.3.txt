#include<bits/stdc++.h>

using namespace std;

struct Node{
    long long val;
    long long sum;
    int sz, pri;
    Node *l, *r;
    Node(long long val1): val(val1),sum(val1*val1),sz(1),pri(rand()),l(nullptr), r(nullptr) {}
};

Node *dd = nullptr;
Node *tmp1,*tmp2,*tmp3,*tmp4;

int get_sz(Node* v) {
    if (!v) return 0;
    return v->sz;
}

long long get_sum(Node* v) {
    if (!v) return 0;
    return v->sum;
}
void upd(Node* v) {
    v->sz = get_sz(v->l) + get_sz(v->r) + 1;
    v->sum = get_sum(v->l) + get_sum(v->r) + v->val*v->val;
}

void split(Node *root,Node*& l,Node*& r,int k) {
    if (!root) {
        l = r = nullptr;
        return;
    }
    if (get_sz(root->l) >= k) {
        split(root->l,l,root->l,k);
        r = root;
        upd(r);
    } else {
        split(root->r,root->r,r,k-1-get_sz(root->l));
        l = root;
        upd(l);
    }
}

void merge(Node*& root,Node *l,Node *r) {
    if (!l || !r) {
        root = l?l:r;
        return;
    }
    if (l->pri > r->pri) {
        merge(l->r,l->r,r);
        root = l;
    } else {
        merge(r->l,l,r->l);
        root = r;
    }
    upd(root);
}

void Print(Node* v) {
    if (!v) return;
    Print(v->l);
    cout<<v->val<<" ";
    Print(v->r);
}

int main() {
    
    freopen("river.in","r",stdin);
    freopen("river.out","w",stdout);
    
    int n,p;
    cin>>n>>p;
    for(int i=0;i<n;i++) {
        int x;
        cin>>x;
        Node *ins = new Node(x);
        merge(dd,dd,ins);
    }

    int q; cin>>q;
    for(int i=0;i<q;i++) {
        cout<<get_sum(dd)<<'\n';
        int t,e;
        cin>>t>>e; e--;
        if (t==1) {
            split(dd,tmp1,tmp2,e);
            split(tmp2,tmp2,tmp3,1);
            int cur = tmp2->val;
            int L = cur / 2, R = cur - L;
            if (get_sz(tmp1)==0) {
                split(tmp3,tmp3,tmp4,1);
                tmp3->val += cur;
                tmp3->sum = tmp3->val*tmp3->val;
                merge(tmp3,tmp3,tmp4);
            } else
            if (get_sz(tmp3)==0) {
                split(tmp1,tmp1,tmp4,get_sz(tmp1)-1);
                tmp4->val += cur;
                tmp4->sum = tmp4->val*tmp4->val;
                merge(tmp1,tmp1,tmp4);
            } else {
                split(tmp3,tmp3,tmp4,1);
                tmp3->val += R;
                tmp3->sum = tmp3->val*tmp3->val;
                merge(tmp3,tmp3,tmp4);
                split(tmp1,tmp1,tmp4,get_sz(tmp1)-1);
                tmp4->val += L;
                tmp4->sum = tmp4->val*tmp4->val;
                merge(tmp1,tmp1,tmp4);
            }
            merge(dd,tmp1,tmp3);
        } else {
            split(dd,tmp1,tmp2,e);
            split(tmp2,tmp2,tmp3,1);
            int cur = tmp2->val;
            tmp2 = nullptr;
            int L = cur / 2, R = cur - L;
            Node *insL = new Node(L);
            Node *insR = new Node(R);
            merge(tmp2,insL,insR);
            merge(dd,tmp1,tmp2);
            merge(dd,dd,tmp3);
        }
    }

    cout<<get_sum(dd)<<'\n';

    return 0;
}
