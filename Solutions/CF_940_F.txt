#include<bits/stdc++.h>

using namespace std;

struct query{
	int t,l,r,idx;
};
struct update{
	int pos, val;
};

int K;
bool cmp(query &a,query &b) {
	if (a.t/K==b.t/K) {
		if (a.l/K==b.l/K) return a.r < b.r;
		return a.l/K < b.l/K;
	}
	return a.t/K < b.t/K;
}

const int MAXN = 3e5 + 1999;
vector<int> cnt(MAXN,0);
vector<int> sz(MAXN,0);

void Add(int a) {
	if (a>MAXN) return;
	sz[cnt[a]]--;
	cnt[a]++;
	sz[cnt[a]]++;
}

void Del(int a) {
	if (a>MAXN) return;
	sz[cnt[a]]--;
	cnt[a]--;
	sz[cnt[a]]++;
}

int main() {

    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

	int n,q;
	cin>>n>>q;
	K = pow(n,0.6666)+5;

	vector<int> a(n);
	vector<int> vals;
	vector<update> updates;
	vector<query> queries;

	// input
	for(int i=0;i<n;i++) {
        cin>>a[i];
        vals.push_back(a[i]);
	}
	for(int i=0;i<q;i++) {
		int t;
		cin>>t;
		if (t==1) {
			int l,r; cin>>l>>r; l--;
			queries.push_back({updates.size(),l,r,i});
		} else {
			int pos,x;
			cin>>pos>>x; pos--;
			updates.push_back({pos,x});
			vals.push_back(x);
		}
	}
	//compression
	sort(vals.begin(),vals.end());
	unordered_map<int,int> mp;
	for(int i=0;i<vals.size();i++) {
        if (i==0 || vals[i]!=vals[i-1]) {
            mp[vals[i]] = mp.size();
        }
	}
	for(int i=0;i<n;i++) a[i] = mp[a[i]];
	for(int i=0;i<updates.size();i++) updates[i].val = mp[updates[i].val];

    // 3D Mo
	sort(queries.begin(),queries.end(),cmp);
	vector<int> answer(q,-1);
	int L = 0,R = 0,time = 0;
	for(int i=0;i<queries.size();i++) {
		int l = queries[i].l,r = queries[i].r,t = queries[i].t,idx = queries[i].idx;
		//cout<<l<<" "<<r<<" "<<t<<endl;
		while(L>l) {
			Add(a[L-1]); L--;
		}
		while(R<r) Add(a[R++]);
		while(L<l) Del(a[L++]);
		while(R>r) {
			Del(a[R-1]); R--;
		}
		while(time>t) {
			int pos = updates[time-1].pos;
			int val = updates[time-1].val;
			if (L<=pos && pos<R) {
				Del(a[pos]);
				Add(val);
			}
			swap(a[pos],updates[time-1].val);
			time--;
		}
		while(time<t) {
			int pos = updates[time].pos;
			int val = updates[time].val;
			if (L<=pos && pos<R) {
				Del(a[pos]);
				Add(val);
			}
			swap(a[pos],updates[time].val);
			time++;
		}

		// Calculating answer
		answer[idx] = 1;
		while(sz[answer[idx]]!=0) answer[idx]++;
	}

	for(int i=0;i<answer.size();i++) if (answer[i]!=-1) cout<<answer[i]<<'\n';

	return 0;
}
