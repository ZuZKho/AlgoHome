#include<bits/stdc++.h>

using namespace std;

int srand() {
    if (RAND_MAX==(1<<15)-1)
        return (rand()<<15) + rand();
    return rand();
}

struct Node{
    long long c, pri;
    long long mass,summass,sumprof;
    Node * l, * r;
    Node(long long c,long long mass) : c(c), mass(mass),summass(mass), sumprof(c*mass),pri(srand()), l(nullptr), r(nullptr) {}
};

Node * tmp1,* tmp2, * tmp3;

long long get_summass(Node* v) {
    if (!v) return 0; else return v->summass;
}
long long get_sumprof(Node* v) {
    if (!v) return 0; else return v->sumprof;
}
void upd(Node* v) {
    if(v) {
        v->summass = get_summass(v->l) + get_summass(v->r) + v->mass;
        v->sumprof = get_sumprof(v->l) + get_sumprof(v->r) + (v->mass)*(v->c);
    }
}

void split(Node * root, Node*& l,Node*& r,long long key) {
    if (!root) {
        l = r = nullptr;
        return;
    }
    if (root->c < key) {
        split(root->r,root->r,r,key);
        l=root;
        upd(l);
    } else {
        split(root->l,l,root->l,key);
        r=root;
        upd(r);
    }
}

void merge(Node*& root,Node* l,Node* r) {
    if (!l||!r) {
        root = l ? l:r;
        return;
    }
    if (l->pri > r->pri) {
        merge(l->r,l->r,r);
        root = l;
    } else {
        merge(r->l,l,r->l);
        root = r;
    }
    upd(root);
}

void insert(Node*& root,long long c,long long b) {
    Node* ins = new Node(c,b);
    split(root,tmp1,tmp2,c);
    merge(tmp1,tmp1,ins);
    merge(root,tmp1,tmp2);
}

long long check(Node*& root,long long mass) {
    if (!root) return 0;
    if (get_summass(root->r)==mass) return get_sumprof(root->r);
    if (get_summass(root->r)>mass) return check(root->r,mass);

    if (get_summass(root->r)+root->mass<mass) {
        long long left = mass - get_summass(root->r) - root->mass;
        long long cur_c = get_sumprof(root->r) + root->mass*root->c;
        return check(root->l,left) + cur_c;
    } else {
        long long left = mass - get_summass(root->r);
        return get_sumprof(root->r) + left * root->c;
    }
}

void erase(Node*& root,long long key) {
    split(root,tmp1,tmp2,key);
    split(tmp2,tmp2,tmp3,key+1);
    merge(root,tmp1,tmp3);
}

long long find(Node* root,long long key) {
    if (!root) return -1;
    if (root->c==key) return root->mass;
    if (root->c>key) return find(root->l,key);
    return find(root->r,key);
}

int main() {

    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n,m;
    long long p,ans = 0;
    cin>>n>>m>>p;
    vector<long long> x(n),a(n),y(m),b(m),c(m);
    for(int i=0;i<n;i++)
        cin>>x[i]>>a[i];
    for(int i=0;i<m;i++)
        cin>>y[i]>>b[i]>>c[i];

//======================================================================
    vector<long long> v;
    int jj=0;
    for(int i=0;i<n;i++) {
        while(jj<m && y[jj]<=x[i]) {
            v.push_back(y[jj]);
            jj++;
        }
        v.push_back(x[i]);
    }
    while(jj<m) {
        v.push_back(y[jj]);
        jj++;
    }
 //==============================================================================================

    int i = 0, j = 0;
    long long av_mass = 0;
    Node* dd = nullptr;

    for(int q=0;q<v.size();q++) {
        while (i<n && x[i]<=v[q]) {
            av_mass += a[i];
            i++;
        }
        while (j<m && y[j]<=v[q]) {

            long long f = find(dd,c[j]);
            if (f==-1) insert(dd,c[j],b[j]); else {
                erase(dd,c[j]);
                insert(dd,c[j],b[j]+f);
            }
            j++;
        }
        ans = max(ans,check(dd,av_mass)-v[q]*p);
    }

    cout<<ans<<endl;

    return 0;
}